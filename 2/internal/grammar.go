package internal

import (
	"fmt"
	"log"
	"sort"
	"strings"
	"unicode"
)

// CFR(Context-free grammar) - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-—Å–≤–æ–±–æ–¥–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞
// https://habr.com/ru/post/177701/
type CFR struct {
	// N ‚Äî –∫–æ–Ω–µ—á–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	N []string
	// T ‚Äî  –∫–æ–Ω–µ—á–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–ª—Ñ–∞–≤–∏—Ç–æ–º —è–∑—ã–∫–∞, –∑–∞–¥–∞–≤–∞–µ–º–æ–≥–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π)
	T []string
	// P ‚Äî –∫–æ–Ω–µ—á–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª –ø–æ—Ä–æ–∂–¥–µ–Ω–∏—è
	P Rules
	// S ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ G
	S []string
}

func (a CFR) IsSame(b CFR) error {
	if err := areStringSlicesSame(a.N, b.N); err != nil {
		return fmt.Errorf("–ù–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ –∞–ª—Ñ–∞–≤–∏—Ç—ã –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è: %s", err)
	}

	if err := a.P.IsSame(b.P); err != nil {
		return fmt.Errorf("–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è: %s", err)
	}

	if err := areStringSlicesSame(a.N, b.N); err != nil {
		return fmt.Errorf("–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ –∞–ª—Ñ–∞–≤–∏—Ç—ã –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è: %s", err)
	}

	if err := areStringSlicesSame(a.S, b.S); err != nil {
		return fmt.Errorf("–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è: %s", err)
	}
	return nil
}

func (a *CFR) updateN() {
	var (
		mapVisited = make(map[string]interface{})
		newN       = make([]string, 0)
	)
	for _, r := range a.P {
		mapVisited[r.From] = nil
		noneTerms := a.toNoneTerminals(r.To)
		for _, nt := range noneTerms {
			mapVisited[nt] = nil
		}
	}

	for k := range mapVisited {
		newN = append(newN, k)
	}
	a.N = newN
}

// –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –ª–µ–≤—É—é —Ä–µ–∫—É—Ä—Å–∏—é
// –ê–ª–≥–æ—Ä–∏—Ç–º 2.13
// https://intuit.ru/studies/courses/1157/173/lecture/4697?page=7
func (cfr CFR) EliminateLeftRecursion() CFR {
	var (
		newRules     Rules
		newSymbols   = make([]string, len(cfr.N))
		markedPoints = cfr.P.MarkLeftRecursives()
	)

	/*
		–æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ—Å–µ—Ç–∏–ª–∏ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª —Å –ª–µ–≤–æ–π —Ä–µ–∫—É—Ä—Å–∏–µ–π
		—Å—Ç–∞–≤—è false –≤ markedPoints
	*/

	copy(newSymbols, cfr.N)
	for _, r := range cfr.P {
		if markedPoints[r.From] {
			var (
				alpha, beta = cfr.P.Filter(r.From, LeftRecursion).AlphaBeta(r.From)
				marked      = r.NewMarked()
			)

			if len(beta) == 0 {
				beta = append(beta, Rule{To: " "})
			}
			var (
				betas          = beta.GetRPart()
				betasWithNewA  = beta.Add(marked).GetRPart()
				alphas         = alpha.GetRPart()
				alphasWithNewA = alpha.Add(marked).GetRPart()
			)

			(&newRules).Append(r.From, append(betas, betasWithNewA...)...)
			(&newRules).Append(marked, append(alphas, alphasWithNewA...)...)
			markedPoints[r.From] = false
			newSymbols = append(newSymbols, marked)
		} else {
			(&newRules).Append(r.From, r.To)
		}
	}

	return CFR{
		N: newSymbols,
		T: cfr.T,
		P: newRules,
		S: cfr.S,
	}
}

// ElrWithE2 - –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –ª–µ–≤—É—é —Ä–µ–∫—É—Ä—Å–∏—é, –æ—Å—Ç–∞–≤–∏–≤ e-–ø—Ä–æ–¥—É–∫—Ü–∏—é
/*
–ê–ª–≥–æ—Ä–∏—Ç–º 4.8 –∏–∑ "–ê—Ö–æ, –°–µ—Ç–∏, –£–ª—å–º–∞–Ω. –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã. –ü—Ä–∏–Ω—Ü–∏–ø—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, 2008, 2-–æ–µ –∏–∑–¥–∞–Ω–∏–µ", —Å—Ç—Ä 277
–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞–º–∏, –Ω–µ –∏–º–µ—é—â–∏–º–∏:
- —Ü–∏–∫–ª–æ–≤(–ø–æ—Ä–æ–∂–¥–µ–Ω–∏–π A -> A)
- e-–ø—Ä–æ–¥—É–∫—Ü–∏–π(–ø—Ä–æ–¥—É–∫—Ü–∏–π –≤–∏–¥–∞ A -> e)
*/
func (cfr CFR) ElrWithE2(isBook bool) CFR {
	var (
		newRules   = make(Rules, len(cfr.P))
		newSymbols = make([]string, len(cfr.N))
	)

	copy(newSymbols, cfr.N)
	copy(newRules, cfr.P)

	for i := 0; i < len(cfr.N); i++ {
		var A·µ¢ = cfr.N[i]
		for j := 0; j < i; j++ {
			var (
				Aùö•    = cfr.N[j]
				fromA = cfr.P.FilterByTwo(A·µ¢, Aùö•, newSymbols)
			)

			newRules = newRules.RemoveRulesFT(A·µ¢, Aùö•)
			r := cfr.replaceRule(fromA, newRules, A·µ¢).GetRPart()
			newRules.Append(A·µ¢, r...)
		}

		if newRules.HasDirectLeftRecursion(A·µ¢) {
			var (
				alpha, beta = newRules.Filter(A·µ¢, LeftRecursion).AlphaBeta(A·µ¢)
				marked      = A·µ¢ + "'"
			)
			var (
				alphaR         = alpha.GetRPart()
				betaR          = beta.GetRPart()
				betasWithNewA  = beta.Add(marked).GetRPart()
				alphasWithNewA = alpha.Add(marked).GetRPart()
			)

			newRules = newRules.RemoveRules(A·µ¢)
			(&newRules).Append(A·µ¢, betasWithNewA...)

			if isBook {
				(&newRules).Append(marked, Epsilon)
			} else {
				(&newRules).Append(A·µ¢, betaR...)
				(&newRules).Append(marked, alphaR...)
			}

			(&newRules).Append(marked, alphasWithNewA...)

			newSymbols = append(newSymbols, marked)
		}
	}

	return CFR{
		N: newSymbols,
		T: cfr.T,
		P: newRules.DeleteE().DeleteItSelf(),
		S: cfr.S,
	}
}

/*
–ê–ª–≥–æ—Ä–∏—Ç–º 4.10 –∏–∑ "–ê—Ö–æ, –°–µ—Ç–∏, –£–ª—å–º–∞–Ω. –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã. –ü—Ä–∏–Ω—Ü–∏–ø—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, 2008, 2-–æ–µ –∏–∑–¥–∞–Ω–∏–µ", —Å—Ç—Ä 278

O—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –ª–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ç–æ–º, —á—Ç–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –Ω–µ—è—Å–Ω–æ, –∫–∞–∫—É—é –∏–∑ –¥–≤—É—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
–Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–∞ A, –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å A - –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –æ—Ç–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–æ
—Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.

–ï—Å–ª–∏ A ->  Œ±B | Œ±C - –¥–≤–∞ A-–ø—Ä–∞–≤–∏–ª–∞ –∏ –≤—Ö–æ–¥–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, –≤—ã–≤–æ–¥–∏–º–æ–π –∏–∑ Œ±,
–º—ã –Ω–µ –∑–Ω–∞–µ–º, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –ª–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–∞–≤–∏–ª—É –∏–ª–∏ –ø–æ –≤—Ç–æ—Ä–æ–º—É. –ú–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É–≤ A -> Œ±A'.
–¢–æ–≥–¥–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã–≤–æ–¥–∏–º–æ –∏–∑ Œ±, –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ A'->B –∏–ª–∏ –ø–æ A'->C.

–õ–µ–≤–æ—Ñ–∞–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤–∏–¥

A -> Œ±A'

A'-> B|C

https://intuit.ru/studies/courses/1157/173/lecture/4697?page=7
*/
func (cfr CFR) LeftFactorization() CFR {
	var mNewRules = make(map[string]Rule, 0)
	groups := cfr.P.Group()

	for from, toAll := range groups {
		newFrom := from
		for len(toAll) > 0 {
			var longPrefix = ""
			prevR := Rule{}
			sort.Sort(toAll)
			// –∏—â–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
			for _, r := range toAll {
				if prevR.From != "" {
					var counter int
					for i := range prevR.To {
						if i >= len(r.To) || r.To[i] != prevR.To[i] {
							break
						}
						counter++
					}
					if len(longPrefix) < counter {
						longPrefix = prevR.To[:counter]
					}
				}
				prevR = r
			}

			if longPrefix == "" {
				for _, r := range toAll {
					r := Rule{From: from, To: r.To}
					mNewRules[r.ID()] = r
					//newRules = append(newRules, Rule{From: from, To: r.To})
				}
				toAll = nil
				break
			}

			newFrom += "'"
			var updateCopyRules = make(Rules, 0)
			// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å —Å–∞–º—ã–º –¥–ª–∏–Ω–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
			for _, r := range toAll {
				ln := len(longPrefix)
				if len(r.To) >= ln && r.To[:ln] == longPrefix {
					newTo := r.To[ln:]
					if newTo == "" {
						newTo = Epsilon
					}
					var (
						a = Rule{From: newFrom, To: newTo}
						b = Rule{From: from, To: longPrefix + newFrom}
					)
					mNewRules[a.ID()] = a
					mNewRules[b.ID()] = b
				} else {
					updateCopyRules = append(updateCopyRules, r)
				}
			}
			toAll = updateCopyRules
		}
	}

	var newRules []Rule

	for _, r := range mNewRules {
		newRules = append(newRules, r)
	}

	newCfr := CFR{
		T: cfr.T,
		P: newRules,
		S: cfr.S,
	}
	newCfr.updateN()
	return newCfr
}

/*

–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Å—Ç—Ä. 175, –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º 2.9. –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º 2.10. [1]. –ü—Ä–∏
—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º 2.4.13. [1].

—Å—Ç—Ä. 171 –∞–ª–≥–æ—Ä–∏—Ç–º 2.9

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –ö–°-–≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∫ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤–∏–¥—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:

—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–µ—Å–ø–ª–æ–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã;
—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã;
—É–¥–∞–ª–∏—Ç—å ^.-–ø—Ä–∞–≤–∏–ª–∞;
—É–¥–∞–ª–∏—Ç—å —Ü–µ–ø–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.
https://uz.denemetr.com/docs/294/index-20812-1.html?page=7

*/

// –£–¥–∞–ª–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã
/*
 –ê–ª–≥–æ—Ä–∏—Ç–º 2.7. , —Å—Ç—Ä. 169
 https://neerc.ifmo.ru/wiki/index.php?title=–£–¥–∞–ª–µ–Ω–∏–µ_–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö_—Å–∏–º–≤–æ–ª–æ–≤_–∏–∑_–≥—Ä–∞–º–º–∞—Ç–∏–∫–∏

–®–∞–≥ 0. –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {S}.
–®–∞–≥ 1. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ, –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–∏—Ç –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª,
	—Å–æ–¥–µ—Ä–∂–∞—â–∏–π—Å—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ, –¥–æ–±–∞–≤–∏–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã –∏–∑ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏.
–®–∞–≥ 2. –ü–æ–≤—Ç–æ—Ä–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, –µ—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Ä–æ–∂–¥–∞—é—â–∏—Ö –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
	–ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤, –∞ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã, –Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –≤ –Ω–µ–≥–æ,
	—è–≤–ª—è—é—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–º–∏.

	O(P+N)
*/
func (cfr CFR) RemoveUnreachableNonterminal() CFR {
	if len(cfr.N) == 0 {
		return cfr
	}
	var (
		mapVisited = make(map[string]interface{})
		// –¥–µ–ª–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å
		// –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ—Ç–µ—Ä–º–∞
		fromTo = cfr.buildDistMap()
		queue  = make([]string, len(cfr.S))
	)
	copy(queue, cfr.S)

	// O(N)
	for len(queue) > 0 {
		head := queue[0]
		queue = queue[1:]
		// –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –Ω–µ—Ç–µ—Ä–º–∞–º, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –∏–∑
		// —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ—Ç–µ—Ä–º–∞
		for _, to := range fromTo[head] {
			_, ok := mapVisited[to]
			if ok {
				continue
			}
			mapVisited[to] = nil
			queue = append(queue, to)
		}
	}

	for _, s := range cfr.S {
		mapVisited[s] = nil
	}

	var newRules Rules

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞, –≥–¥–µ –ª–µ–≤–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∏–∂–∏–º—ã–π –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª
	for _, v := range cfr.P {
		_, ok := mapVisited[v.From]
		if ok {
			newRules = append(newRules, v)
		}
	}

	newCfr := &CFR{
		T: cfr.T,
		P: newRules,
		S: cfr.S,
	}

	newCfr.updateN()
	return *newCfr
}

// RemoveNongeneratingNonterminal - –£–¥–∞–ª–∏—Ç—å –Ω–µ–ø–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã
/*
 –ê–ª–≥–æ—Ä–∏—Ç–º 2.8. , —Å—Ç—Ä. 169
 https://neerc.ifmo.ru/wiki/index.php?title=–£–¥–∞–ª–µ–Ω–∏–µ_–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö_—Å–∏–º–≤–æ–ª–æ–≤_–∏–∑_–≥—Ä–∞–º–º–∞—Ç–∏–∫–∏#.D0.94.D0.BE.D1.81.D1.82.D0.B8.D0.B6.D0.B8.D0.BC.D1.8B.D0.B5_.D0.B8_.D0.BD.D0.B5.D0.B4.D0.BE.D1.81.D1.82.D0.B8.D0.B6.D0.B8.D0.BC.D1.8B.D0.B5_.D0.BD.D0.B5.D1.82.D0.B5.D1.80.D0.BC.D0.B8.D0.BD.D0.B0.D0.BB.D1.8B

–®–∞–≥ 0. –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Ä–æ–∂–¥–∞—é—â–∏—Ö –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–æ–µ.
–®–∞–≥ 1. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –≤ –ø—Ä–∞–≤—ã—Ö —á–∞—Å—Ç—è—Ö
	–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –≤ –ª–µ–≤—ã—Ö —á–∞—Å—Ç—è—Ö —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª,
	–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
–®–∞–≥ 2. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ, —á—Ç–æ –≤—Å–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã, —Å—Ç–æ—è—â–∏–µ –≤ –µ–≥–æ
	–ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏, —É–∂–µ –≤—Ö–æ–¥—è—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Ç–æ –¥–æ–±–∞–≤–∏–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã,
	—Å—Ç–æ—è—â–∏–µ –≤ –µ–≥–æ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏.
–®–∞–≥ 3. –ü–æ–≤—Ç–æ—Ä–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, –µ—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Ä–æ–∂–¥–∞—é—â–∏—Ö –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
	–∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
	–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ—Ä–æ–∂–¥–∞—é—â–∏—Ö –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏,
	–∞ –≤—Å–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã, –Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –≤ –Ω–µ–≥–æ, —è–≤–ª—è—é—Ç—Å—è –Ω–µ–ø–æ—Ä–æ–∂–¥–∞—é—â–∏–º–∏.

	// –°–ª–æ–∂–Ω–æ—Å—Ç—å O(P)
*/
func (cfr CFR) RemoveNongeneratingNonterminal() CFR {
	if len(cfr.N) == 0 {
		return cfr
	}

	var (
		// –ß–∏—Å–ª–æ –Ω–µ–ø–æ—Ä–æ–∂–¥–∞—é—â–∏—Ö –Ω–µ—Ç–µ—Ä–º–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö
		ruleCounter = make(map[*RuleWithTerms]interface{})
		// –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã
		mapVisited = make(map[string]interface{})
		// –û—á–µ—Ä–µ–¥—å –Ω–µ—Ç–µ—Ä–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		queue = []string{}
	)

	// –Ω–∞–π–¥–µ–º –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –Ω–µ—Ç–µ—Ä–º—ã
	for i, q := range cfr.P {
		var (
			noneTerms = cfr.toNoneTerminalsMap(q.To)
			rterms    = RuleWithTerms{
				r:         &cfr.P[i],
				noneTerms: noneTerms,
			}
		)

		ruleCounter[&rterms] = nil
		// –Ω–µ—Ç–µ—Ä–º —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–º
		if len(noneTerms) == 0 {
			_, ok := mapVisited[q.From]
			if ok {
				continue
			}
			// –∑–∞–Ω–µ—Å–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
			queue = append(queue, q.From)
			mapVisited[q.From] = nil
		}
	}
	for _, s := range cfr.S {
		mapVisited[s] = nil
	}

	for len(queue) > 0 {
		var localQueue = make([]string, len(queue))
		copy(localQueue, queue)
		queue = []string{}

		for k := range ruleCounter {
			for _, lq := range localQueue {
				// –ï—Å–ª–∏ —É –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ—Ç–µ—Ä–º–æ–≤
				if len(k.noneTerms) == 0 {
					break
				}
				// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –Ω–µ—Ç–µ—Ä–º
				delete(k.noneTerms, lq)

				// –¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ —Å–ø—Ä–∞–≤–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ—Ç–µ—Ä–º–æ–≤
				// —Ç–æ –Ω–µ—Ç–µ—Ä–º —Å–ª–µ–≤–∞ —Å—Ç–∞–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–º, –ø–æ–º–µ—Ç–∏–º —ç—Ç–æ
				if len(k.noneTerms) == 0 {
					_, ok := mapVisited[k.r.From]
					if !ok {
						break
					}
					mapVisited[k.r.From] = nil
					queue = append(queue, k.r.From)
				}
			}
		}
	}

	var newRules Rules

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞, –≥–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –Ω–µ—Ç–µ—Ä–º–æ–≤
	for rc := range ruleCounter {
		if len(rc.noneTerms) == 0 {
			newRules = append(newRules, *rc.r)
		}
	}

	newCfr := &CFR{
		T: cfr.T,
		P: newRules,
		S: cfr.S,
	}

	newCfr.updateN()
	return *newCfr
}

// RemoveUselessNonterms —É–¥–∞–ª–∏—Ç—å –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –Ω–µ—Ç–µ—Ä–º—ã
func (cfr CFR) RemoveUselessNonterms() CFR {
	return cfr.RemoveNongeneratingNonterminal().
		RemoveUnreachableNonterminal()
}

// RuleWithTerms - –ø—Ä–∞–≤–∏–ª–æ —Å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏ -
// –∫–∞–Ω–¥–∏–¥–∞–º–∏ –≤ –Ω–µ–ø–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—ã
type RuleWithTerms struct {
	r         *Rule
	noneTerms map[string]interface{}
}

// ToNoneTerminals –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
func (cfr CFR) toNoneTerminals(str string) []string {
	var (
		noneTerminals = []string{}
		searchStr     string
	)
	for _, r := range str {
		if unicode.IsLower(r) {
			continue
		}
		searchStr += string(r)
		if r == '\'' {
			if len(noneTerminals) > 0 {
				noneTerminals[len(noneTerminals)-1] += "'"
			}
			continue
		}

		for _, v := range cfr.N {
			if searchStr == v {
				searchStr = ""
				noneTerminals = append(noneTerminals, v)
				break
			}
		}

	}
	return noneTerminals
}

// ToNoneTerminals –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø—É –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
func (cfr CFR) toNoneTerminalsMap(str string) map[string]interface{} {
	var (
		found         = cfr.toNoneTerminals(str)
		noneTerminals = make(map[string]interface{})
	)
	for _, str := range found {
		noneTerminals[str] = nil
	}
	return noneTerminals
}

type Symbol struct {
	Spell string
	Type  string // "term" –∏–ª–∏ "nonterm"
}

// TermsAndNonTerms –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —Ç–µ—Ä–º–∞–º–∏
// –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç–µ—Ä–º–∞–º–∏
func (cfr CFR) TermsAndNonTerms(str string) []Symbol {
	var (
		symbols   = []Symbol{}
		searchStr string
	)
	for _, r := range str {
		searchStr += string(r)
		if unicode.IsLower(r) {
			for _, v := range cfr.T {
				if searchStr == v {
					searchStr = ""
					symbols = append(symbols, Symbol{
						Spell: v,
						Type:  "term",
					})
					break
				}
			}
			continue
		}
		if r == '\'' {
			if len(symbols) > 0 {
				symbols[len(symbols)-1].Spell += "'"
			}
			continue
		}

		for _, v := range cfr.N {
			if searchStr == v {
				searchStr = ""
				symbols = append(symbols, Symbol{
					Spell: v,
					Type:  "nonterm",
				})
				break
			}
		}

	}
	return symbols
}

// http://mathhelpplanet.com/static.php?p=privedennaya-forma-ks-grammatiki
// file:///home/artyom/–ó–∞–≥—Ä—É–∑–∫–∏/formal.languages.theory.3.pdf
/*

 */
func (cfr CFR) RemoveLambda() CFR {
	if len(cfr.N) == 0 {
		return cfr
	}

	var (
		// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
		mapNewRules = make(map[string]*Rule)

		// –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã
		mapVisited = make(map[string]interface{})
		// –û—á–µ—Ä–µ–¥—å –Ω–µ—Ç–µ—Ä–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ—Ö–æ–¥
		queue = []string{}
	)
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ—Ç–µ—Ä–º—ã —Å –ø—É—Å—Ç—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
	for i, q := range cfr.P {
		if q.To == Epsilon {
			_, ok := mapVisited[q.From]
			if ok {
				continue
			}
			queue = append(queue, q.From)
			mapVisited[q.From] = nil
		} else {
			// –ü–æ–º–µ—â–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ mapNewRules
			mapNewRules[q.From+q.To] = &cfr.P[i]
		}
	}

	for len(queue) > 0 {
		var localQueue = make([]string, len(queue))
		copy(localQueue, queue)
		queue = []string{}
		for _, lq := range localQueue {
			for _, r := range mapNewRules {
				strs := r.ApplyEpsilon(cfr, lq)
				for _, str := range strs {
					if str == r.From || str == "" {
						if str == "" {
							_, ok := mapVisited[r.From]
							if !ok {
								queue = append(queue, r.From)
								mapVisited[r.From] = nil
							}
						}
						continue
					}
					_, ok := mapNewRules[str+r.From]
					if ok {
						continue
					}

					mapNewRules[str+r.From] = &Rule{
						From: r.From,
						To:   str,
					}
				}
			}
		}
	}

	var newRules Rules

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
	for _, rc := range mapNewRules {
		newRules.Append(rc.From, rc.To)
	}

	newCfr := &CFR{
		T: cfr.T,
		P: newRules,
		S: cfr.S,
	}

	var countNT = make(map[string]int)
	for _, r := range newCfr.P {
		countNT[r.From]++
	}
	newCfr.updateN()

	newRules = Rules{}
	for _, r := range newCfr.P {
		m := cfr.toNoneTerminalsMap(r.To)
		var canAdd = true
		for nt := range m {
			if countNT[nt] == 0 {
				canAdd = false
				break
			}
		}
		if canAdd {
			newRules = append(newRules, r)
		}
	}
	newCfr.P = newRules

	return *newCfr
}

// RemoveChains - —É–¥–∞–ª–∏—Ç—å —Ü–µ–ø–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
/*
–ü—Ä–∞–≤–∏–ª–∞ –≤–∏–¥–∞ A -> B, –≥–¥–µ A –∏ B –Ω–µ—Ç–µ—Ä–º—ã –æ–¥–Ω–æ–π
 –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏, –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —Ü–µ–ø–Ω—ã–º–∏.


 l - –¥–ª–∏–Ω–∞ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞
 P - —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª
 N - —á–∏—Å–ª–æ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
 C - —á–∏—Å–ª–æ —Ü–µ–ø–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª

 O(P*l) + O(N*–°*(P-L))
*/
func (cfr CFR) RemoveChains() CFR {
	var (
		// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
		mapNewRules = make(map[string]Rule)
		// —Ü–µ–ø–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
		withChains, noChains = cfr.groupByChains()
	)

	for _, originFrom := range cfr.N {
		ntGroup, ok := withChains[originFrom]
		if !ok {
			ntGroup = make(map[string]interface{})
		}
		ntGroup[originFrom] = nil
		for from, allTo := range noChains {
			_, found := ntGroup[from]
			for to := range allTo {
				if found {
					r := Rule{From: originFrom, To: to}
					mapNewRules[r.ID()] = r
				}
			}
		}
	}

	var newRules Rules

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
	for _, rc := range mapNewRules {
		newRules.Append(rc.From, rc.To)
	}

	newCfr := &CFR{
		T: cfr.T,
		P: newRules,
		S: cfr.S,
	}

	newCfr.updateN()

	return *newCfr
}

// Bring - –ø—Ä–∏–≤–µ—Å—Ç–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
func (cfr CFR) Bring() CFR {
	return cfr.RemoveLambda().
		RemoveChains().
		RemoveNongeneratingNonterminal().
		RemoveUnreachableNonterminal()
}

// Print - —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
func (cfr CFR) Print(text string) {
	log.Println(text)
	log.Printf("–ù–∞–±–æ—Ä –Ω–µ—Ç–µ—Ä–º–æ–≤: \n%s", strings.Join(cfr.N, " "))
	log.Printf("–ù–∞–±–æ—Ä —Ç–µ—Ä–º–æ–≤: \n%s", strings.Join(cfr.T, " "))
	log.Printf("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–µ—Ç–µ—Ä–º: \n%s", cfr.S[0])

	sort.Sort(cfr.P)

	var rules = make([]string, len(cfr.P))
	for i, r := range cfr.P {
		rules[i] = r.From + " -> " + r.To
	}
	log.Printf("–ù–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª: \n%s", strings.Join(rules, "\n"))
}

func (r Rules) Len() int { return len(r) }
func (r Rules) Less(i, j int) bool {
	return r[i].From < r[j].From ||
		(r[i].From == r[j].From && r[i].To < r[j].To)
}
func (r Rules) Swap(i, j int) { r[i], r[j] = r[j], r[i] }

// 551 -> 725
